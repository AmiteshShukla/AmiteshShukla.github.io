<!DOCTYPE html>
<html>
<head>
  <title>CS498-Final Project</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
  <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
  <link href='style.css' rel='stylesheet' type='text/css'>
  <script src="d3.js" charset="utf-8"></script>   
</head>

<body>

<script type="text/javascript">
function showDiv() {
   document.getElementById('welcomeDiv').style.display = "block";
}
</script>

<!-- <div class="w3-content w3-display-container"> -->
<div> 
  <div class="mySlides">
        <div id="welcomeDiv" style="display:none;" class="slide1" style="margin-left: 500px; padding-left: 200px">
          <h2 class="w3-center" style="font-weight: bold; font-size: 20px">About the Project</h2>

          <h2 class="w3-center" style="font-size: 12px">Ionel Miu</h2>

            <h6 style="font-weight: bold;">Structure</h6>
              <p> Giving that data used for this project represents sales history,  <em>dashboard</em> structure(hybrid) seems to be the most suitable way to visualize it; a short description of the viz, followed by the actual visualization for free exploration where user can draw conclusions.
              </p>

            <h6 style="font-weight: bold;">Scene Utilization</h6>
              <p> The presentation could have been organized in slideshow format (having one plot per slide for a scene) but, again, giving the nature of the data, it is more desirable to presented it all on one screen; entire data is available to the user at all times, thus, eliminating the need to memorize it or to switch between slides. Nevertheless, presentation is still divided in <em>scenes</em> that can be viewed left to right, top to bottom. 
              </p>

            <h6 style="font-weight: bold;">Annotations, Parameters, Triggers</h5>
              <p>Thoughout the viz, tooltips and color were used as <em>annotations</em> to represent various <em>parameters</em>(<em>sales, profit and.distinctcity to profit ratio</em>. Also, <em>mouseover, mousein, mouseover</em> have been used as <em>triggers</em> to display the tooltips and changes of the parameters.</p> 
          </div>
<div>
<input type="button" name="answer" value="About the Visualization" onclick="showDiv()" />
</div>

  </div>
  <div class="mySlides">
    <h2 class="w3-center" style="font-weight: bold; font-size: 20px">What does this viz represents?</h2>
      <div class="slide2" style="margin-top: 70px;"></div>
      <p> The visualization presented here represents dashboard.distinctcity history of an office supply store over one year time frame. The store sales products that are divided into three main categories: <br>
      - Furniture (desks, chairs, etc) <br>
      - Technology (computers, tables, etc) <br>
      - Office Supplies (paper, binders, etc) <br>
      </p>
      <p>
      Monthly sale history is displayed as a bar plot. Sale volume is represented by the size of the bar with the associated color representing the profit.
      The size of the profit is captured in the associated legend, <em>Profit</em>.</p>
      <p>Geographical distribution of sales throughout US states is displayed as a map plot with color representing the sales volume. The accompaning legend can be used to translate hue to size.
      </p>
      <p>Besides size and color, primarily used to 'draw' attention, both, monthly sales and geographical distribution are accompanied by tooltips for finer details.</p>

      <p>The sale trends of each of the three categories listed above were represented as lines with no axis for a cleaner display.</p>

      <p>Without further ado, let's let the viz speak for data...:)</p>
  </div>

<!--
  <div class="mySlides">
    <h2 class="w3-center">Slideshow 3</h2>
        <div class="slide3"></div>
      <p> 
      </p>
  </div>
-->

  <div class="mySlides">
    <!--<h2 class="w3-center">Slideshow 4</h2> -->
      <div class="slide4">


      <h1 id="dashTitle">US Restaurants by Region</h1>

      <div id="topChart" style="float: left; width: 800px;">
      <h2 style="margin-left:50px; float:left;">Fast Food Restaurant Presence</h2>       
      <svg id="barChartLegend"></svg>
        <svg id="barChart"></svg>
      </div>


      <div id="bottomLeft" style="float:left; width: 350px; margin-left: 50px;"></div>

      <div id="bottomRight" style="float:left; width: 400px;">
        <h2>Cuisine Diversity - State</h2>               
      </div>

      <!-- global functions -->
      <script>     
      function formatSales(d){
          var prefix = d3.formatPrefix(d);
          var num =  prefix.scale(d).toFixed();                     
          return num+prefix.symbol;
      }

      function compareNums(a,b){
        return a-b;
      }

      </script>



      <!-- build bar chart -->
      <script>

        function buildBar(ds){


        var barTooltip = d3.select("body").append("div")   
            .attr("class", "tooltip")               
            .style("opacity", 0);

          
          var formatRatio = d3.format("%");
//AMS
        var margin = {top: 20, right: 30, bottom: 70, left: 40},
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;
        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);
        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .tickFormat(d3.format("s"))
            .ticks(3);

        //get bar color
//AMS
        var minProfit = d3.min(ds, function(d){ return d.percentage; });
        var maxProfit = d3.max(ds, function(d){ return d.percentage; });

        // console.log(minProfit);
        // console.log(maxProfit);
<!--
        var color = d3.scale.quantize()
              //.domain([minProfit, maxProfit])             
              .domain([0.1, 22])             
              .range(['rgb(202,0,32)','rgb(204,150,30)','rgb(86,186,186)','rgb(64,64,64)',
                    'rgb(102,60,232)','rgb(44,65,230)','rgb(200,6,86)','rgb(164,4,4)',
                    'rgb(210,260,232)','rgb(44,265,230)','rgb(200,226,86)','rgb(164,244,244)']);
-->
        var color = d3.scale.quantize()
                 .domain(['American','Mexican','Italian'])
                 .range(['blue','orange','green'])
        var chart = d3.select("#barChart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.csv("2013-monthly-sales.csv", function(error, data) {
          x.domain(data.map(function(d) { return d.name; }));
          y.domain([0, 15+ d3.max(data, function(d) { return d.distinctcity; })]);

          chart.append("g")
              .attr("class", "x-axis")
              .attr("transform", "translate(0," + height + ")")
              .call(xAxis);
          chart.selectAll("text")	
              .style("text-anchor", "start")
              .attr("dx", ".5em")
              .attr("dy", ".15em")
              .attr("transform", function(d) {
                   return "rotate(90)" 
               });
          chart.append("g")
              .attr("class", "y-axis")
              .call(yAxis);

          chart.selectAll("#barChart")
          .data(data)
          .enter().append("rect")
          .attr("class", "bar")
          .attr("x", function(d) { return x(d.name); })
          .attr("y", function(d) { return y(d.distinctcity); })
          .attr("height", function(d) { return height - y(d.distinctcity); })
          .attr("width", x.rangeBand())
          .style("fill", function(d) { return color(d.cuisine); })
          .on("mouseover", function(d) {      

                            barTooltip.transition()        
                                .duration(500)      
                                .style("opacity", .9);      

                            var tip = "<strong>Name:</strong> " + d.name+ "<br/>";
                            var tip = tip+"<strong>Distinct City Count:</strong> " + d.distinctcity + "<br/>";
                            var tip = tip+"<strong>Percentage Share:</strong> " + d.percentage+ "%<br/>";
                            var tip = tip+"<strong>Cuisine:</strong> " + d.cuisine+ "<br/>";

                            barTooltip.html(tip)  
                                .style("left", (d3.event.pageX) + "px")     
                                .style("top", (d3.event.pageY - 28) + "px");    
                        })                  
                        .on("mouseout", function(d) {       

                            barTooltip.transition()        
                                .duration(500)      
                                .style("opacity", 0);   
                        });


        });
        }


        function buildLegend(data){

              var margin = {top: 20, right: 30, bottom: 30, left: 40},
                width = 800 - margin.left - margin.right,
                height = 200 - margin.top - margin.bottom;


            var minProfit = d3.min(data, function(d){ return d.percentage; });
            var maxProfit = d3.max(data, function(d){ return d.percentage; });

            // console.log(minProfit);
            // console.log(maxProfit);

            var color = d3.scale.quantize()
                  .domain([minProfit, maxProfit])             
                  .range(['rgb(20,0,32)','rgb(144,165,130)','rgb(186,186,186)']);

              //sort values for color legend

                        var barLegendData=[];

                        data.forEach(function(dv){

                          var val = parseFloat(dv.cuisine)

                          if (val) {barLegendData.push(val);}

                        });

                        barLegendData.sort(function(a,b){ return a-b;});

                        // console.log(barLegendData);

                        var header = d3.select("#barChartLegend")
                    .attr("width", 200)
                    .attr("height", 50)                   
                    .attr("transform", "translate(" + 300 + "," + -180 + ")");

              header.append("text").text("Profit")
                  .attr({
                    x: 0,
                    y: 165,
                    class: "profitLabel"                  
                  });

                        //add color legend
                        header.selectAll(".barChartLegend")                         
                          .data(barLegendData)
                          .enter()
                          .append("rect")
                          .attr({
                x: function(d, i) {return i * (200/barLegendData.length);},
                  y: height+margin.top,
                  width: function(d,i){ return (200/barLegendData.length); },
                  height: 10,
                  fill: function(d) { return color(d);},                               
                  class: "barChartLegend"
                          });


                          // console.log([barLegendData[0],barLegendData[barLegendData.length-1]]);

                        header.selectAll("text.profitLegend")
                          .data([barLegendData[0],barLegendData[barLegendData.length-1]])
                          .enter()
                          .append("text")
                          .text(function(d){ return formatSales(d);})
                          .attr({
                            x: function(d,i){ return (200-(margin.left/2))*i;},
                            //y: h-155,            
                            y: 195,            
                            "font-size":"12px",
                            "font-family":"sans-serif",
                            class: "profitLegend"

                          });
        }

        d3.csv("2013-monthly-sales.csv", function(error, data) {
             
             if(error) {
                  console.log(error);
             }  else {

                buildLegend(data);
                buildBar(data);                    
             }
              
              
          });  
      </script>

      <script>

          function buildLine(ds) {


            var margin = {top: 20, right: 30, bottom: 30, left: 40},
            w = 400 - margin.left - margin.right,
            h = 100 - margin.top - margin.bottom;


              //scales
              var xScale = d3.scale.linear()
                          .domain([
                                      d3.min(ds.monthlySales, function(d){ return d.name;}) ,
                                      d3.max(ds.monthlySales, function(d){ return d.name;})
                                  ])
                          .range([0, w])
                          .nice();


              var yScale = d3.scale.linear()
                          .domain([0, d3.max(ds.monthlySales, function(d){ return d.distinctcity;})])
                          .range([h,0])
                          .nice();

              var lineFun = d3.svg.line()
                  .x(function (d) {return xScale(d.name); } )
                  .y(function (d) {return yScale(d.distinctcity); })
                  .interpolate("cardinal");


              var svg = d3.select("#bottomLeft").append("svg").attr({ width:w, height:h});

              var viz = svg.append("path")
                          .attr({
                              d: lineFun(ds.monthlySales),
                              "stroke" : "#666666",
                              "stroke-width": 2,
                              "fill" : "none"
                          });


          }

          function showHeader(ds) {
              d3.select("#bottomLeft").append("h2")
                  .text(ds.category + " Sales Trend");
          }

          d3.json("2013-category-sales.json", function(error, data) {

             if(error) {
                 console.log(error);
             }

              data.contents.forEach(function(ds){
//                  showHeader(ds);
                  buildLine(ds);
              })

          });
        </script>

        <!-- build map -->
        <script>


        var margin = {top: 20, right: 30, bottom: 30, left: 40},
            w = 400 - margin.left - margin.right,
            h = 400 - margin.top - margin.bottom;

                
                var projection = d3.geo.albersUsa()
                                   .translate([w/2+10, (h/2)-80])
                                   .scale([h+50]);

                
                var path = d3.geo.path()
                .projection(projection);
                                 
                var color = d3.scale.linear()       
              .range(['rgb(229,245,224)','rgb(199,233,192)','rgb(161,217,155)','rgb(116,196,118)','rgb(65,171,93)','rgb(35,139,69)','rgb(0,90,50)']);

                                    

                //Create SVG element
                var svg = d3.select("#bottomRight")
                            .append("svg")
                            .attr("width", w)
                            .attr("height", h);


                //Load in Sales Data
                d3.csv("2013-state-sales.csv", function(data) {

                    //Set input domain for color scale
                    color.domain([0,d3.max(data, function(d) { return d.distinctcity; })]);

                    //Load in GeoJSON data
                    d3.json("us.json", function(json) {

                        for (var i = 0; i < data.length; i++) {
                    
                            var dataState = data[i].state;
                            
                            var dataValue = parseFloat(data[i].sales);
                    
                            for (var j = 0; j < json.features.length; j++) {

                        var jsonState = json.features[j].properties.NAME;
                    
                                if (dataState == jsonState) {
                            
                                    json.features[j].properties.value = dataValue;
                                    break;
                                    
                                }
                            }       
                        }

                        var mapTooltip = d3.select("body").append("div")   
                  .attr("class", "tooltip")               
                  .attr("id", "mapTooltip")
                  .style("opacity", 0);


                        //Build Map
                        svg.selectAll("path")
                           .data(json.features)
                           .enter()
                           .append("path")
                           .attr("d", path)
                           .style("fill", function(d) {
                                var value = d.properties.value;
                                
                                if (value) {
                                    return color(value);
                                } else {
                                    return "#fff";
                                }
                           })
                        .on("mouseover", function(d) {      

                                mapTooltip.transition()        
                                    .duration(500)      
                                    .style("opacity", .9);      

                                var tip = "<strong>" + d.properties.NAME + "</strong><br/>"
                                var tip = tip + "<strong>Sales:</strong> $" + formatSales(d.properties.value) + "<br/>";

                                mapTooltip.html(tip)  
                                    .style("left", (d3.event.pageX) + "px")     
                                    .style("top", (d3.event.pageY - 28) + "px");    
                            })                  
                            .on("mouseout", function(d) {       

                                mapTooltip.transition()        
                                    .duration(500)      
                                    .style("opacity", 0);   
                            });


                            //sort values for color legend

                            var legendData=[];

                            json.features.forEach(function(prop){

                              var val = parseFloat(prop.properties.value)

                              if (val) {legendData.push(val);}

                              
                            });

                            legendData.sort(function(a,b){ return a-b;});

                            // add color legend
                            svg.selectAll("rect")                             
                              .data(legendData)
                              .enter()
                              .append("rect")
                              .attr({
                    x: function(d, i) {return i * (w/legendData.length);},
                      //y: h-140,
                      y: 210,
                      width: function(d,i){ return (w/legendData.length); },
                      height: 10,
                      fill: function(d) { return color(d);}                                  
                              });

                            svg.selectAll("text")
                              .data([legendData[0],legendData[legendData.length-1]])
                              .enter()
                              .append("text")
                              .text(function(d){ return formatSales(d);})
                              .attr({
                                x: function(d,i){ return (w-(margin.left/2))*i;},
                                //y: h-150,            
                                y: 200,            
                                "font-size":"12px",
                                "font-family":"sans-serif"                    
                              });
                
                    });
                
                });


        </script>

    </div>
    </div>
  </div>

  <div class="mySlides">
    <h2 class="w3-center"></h2>
        <div class="slide5" style="margin-top: 150px;"></div>

    <h2><em>Acknowledgments and credits:</em></h2>
    <p>To followings represent the main resources used for completion of this project:</p>
    <h6 style="font-weight: bold;">Slideshow</h6>
    <p> <a href='https://www.w3schools.com/w3css/w3css_slideshow.asp'> W3School Slideshow </a></p>
    <h6 style="font-weight: bold;">Maps</h6>
    <p> <a href='https://medium.com/@mbostock/command-line-cartography-part-1-897aa8f8ca2c'>Command-Line Cartography</a></p>

    <h6 style="font-weight: bold;">Javascript, SVG, D3</h6>
    <p> <a href='https://www.codeschool.com/'>Code School</a></p>
        <h2 class="w3-center">Thank you!</h2>
</div>
  <button class="w3-button w3-black w3-display-left" style="opacity: 0.7" onclick="plusDivs(-1)">&#10094;</button>
  <button class="w3-button w3-black w3-display-right" style="opacity: 0.7" onclick="plusDivs(1)">&#10095;</button>
</div>

<script>
var slideIndex = 1;
showDivs(slideIndex);

function plusDivs(n) {
  showDivs(slideIndex += n);
}

function showDivs(n) {
  var i;
  var x = document.getElementsByClassName("mySlides");
  if (n > x.length) {slideIndex = 1}    
  if (n < 1) {slideIndex = x.length}
  for (i = 0; i < x.length; i++) {
     x[i].style.display = "none";  
  }
  x[slideIndex-1].style.display = "block";  
}
</script>
<script type="text/javascript" src="js/project.js"></script>

</body>
</html>
